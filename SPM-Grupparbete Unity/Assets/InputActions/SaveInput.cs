//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputActions/SaveInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SaveInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SaveInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SaveInput"",
    ""maps"": [
        {
            ""name"": ""SaveMap"",
            ""id"": ""9d8b8f09-c9c6-4df1-8b86-3e6833854eff"",
            ""actions"": [
                {
                    ""name"": ""Loaded"",
                    ""type"": ""Button"",
                    ""id"": ""7be0b58d-5a74-48d4-b513-a122bfb2928c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Save"",
                    ""type"": ""Button"",
                    ""id"": ""1107155b-8347-46f4-abf4-4e00ee4353cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b01c832c-e8a5-4573-a256-501c61960459"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Save"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8637608-98e3-4dcf-a5e3-efa3ce2794ef"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Loaded"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SaveMap
        m_SaveMap = asset.FindActionMap("SaveMap", throwIfNotFound: true);
        m_SaveMap_Loaded = m_SaveMap.FindAction("Loaded", throwIfNotFound: true);
        m_SaveMap_Save = m_SaveMap.FindAction("Save", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SaveMap
    private readonly InputActionMap m_SaveMap;
    private ISaveMapActions m_SaveMapActionsCallbackInterface;
    private readonly InputAction m_SaveMap_Loaded;
    private readonly InputAction m_SaveMap_Save;
    public struct SaveMapActions
    {
        private @SaveInput m_Wrapper;
        public SaveMapActions(@SaveInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Loaded => m_Wrapper.m_SaveMap_Loaded;
        public InputAction @Save => m_Wrapper.m_SaveMap_Save;
        public InputActionMap Get() { return m_Wrapper.m_SaveMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SaveMapActions set) { return set.Get(); }
        public void SetCallbacks(ISaveMapActions instance)
        {
            if (m_Wrapper.m_SaveMapActionsCallbackInterface != null)
            {
                @Loaded.started -= m_Wrapper.m_SaveMapActionsCallbackInterface.OnLoaded;
                @Loaded.performed -= m_Wrapper.m_SaveMapActionsCallbackInterface.OnLoaded;
                @Loaded.canceled -= m_Wrapper.m_SaveMapActionsCallbackInterface.OnLoaded;
                @Save.started -= m_Wrapper.m_SaveMapActionsCallbackInterface.OnSave;
                @Save.performed -= m_Wrapper.m_SaveMapActionsCallbackInterface.OnSave;
                @Save.canceled -= m_Wrapper.m_SaveMapActionsCallbackInterface.OnSave;
            }
            m_Wrapper.m_SaveMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Loaded.started += instance.OnLoaded;
                @Loaded.performed += instance.OnLoaded;
                @Loaded.canceled += instance.OnLoaded;
                @Save.started += instance.OnSave;
                @Save.performed += instance.OnSave;
                @Save.canceled += instance.OnSave;
            }
        }
    }
    public SaveMapActions @SaveMap => new SaveMapActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface ISaveMapActions
    {
        void OnLoaded(InputAction.CallbackContext context);
        void OnSave(InputAction.CallbackContext context);
    }
}
